// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: oai/v1/oai.proto

package oaiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ugent-library/oai-service/gen/oai/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OaiServiceName is the fully-qualified name of the OaiService service.
	OaiServiceName = "oai.v1.OaiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OaiServiceAddRecordProcedure is the fully-qualified name of the OaiService's AddRecord RPC.
	OaiServiceAddRecordProcedure = "/oai.v1.OaiService/AddRecord"
)

// OaiServiceClient is a client for the oai.v1.OaiService service.
type OaiServiceClient interface {
	AddRecord(context.Context, *connect_go.Request[v1.AddRecordRequest]) (*connect_go.Response[v1.AddRecordResponse], error)
}

// NewOaiServiceClient constructs a client for the oai.v1.OaiService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOaiServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OaiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &oaiServiceClient{
		addRecord: connect_go.NewClient[v1.AddRecordRequest, v1.AddRecordResponse](
			httpClient,
			baseURL+OaiServiceAddRecordProcedure,
			opts...,
		),
	}
}

// oaiServiceClient implements OaiServiceClient.
type oaiServiceClient struct {
	addRecord *connect_go.Client[v1.AddRecordRequest, v1.AddRecordResponse]
}

// AddRecord calls oai.v1.OaiService.AddRecord.
func (c *oaiServiceClient) AddRecord(ctx context.Context, req *connect_go.Request[v1.AddRecordRequest]) (*connect_go.Response[v1.AddRecordResponse], error) {
	return c.addRecord.CallUnary(ctx, req)
}

// OaiServiceHandler is an implementation of the oai.v1.OaiService service.
type OaiServiceHandler interface {
	AddRecord(context.Context, *connect_go.Request[v1.AddRecordRequest]) (*connect_go.Response[v1.AddRecordResponse], error)
}

// NewOaiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOaiServiceHandler(svc OaiServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(OaiServiceAddRecordProcedure, connect_go.NewUnaryHandler(
		OaiServiceAddRecordProcedure,
		svc.AddRecord,
		opts...,
	))
	return "/oai.v1.OaiService/", mux
}

// UnimplementedOaiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOaiServiceHandler struct{}

func (UnimplementedOaiServiceHandler) AddRecord(context.Context, *connect_go.Request[v1.AddRecordRequest]) (*connect_go.Response[v1.AddRecordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("oai.v1.OaiService.AddRecord is not implemented"))
}
