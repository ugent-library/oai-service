// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/predicate"
)

// MetadataFormatDelete is the builder for deleting a MetadataFormat entity.
type MetadataFormatDelete struct {
	config
	hooks    []Hook
	mutation *MetadataFormatMutation
}

// Where appends a list predicates to the MetadataFormatDelete builder.
func (mfd *MetadataFormatDelete) Where(ps ...predicate.MetadataFormat) *MetadataFormatDelete {
	mfd.mutation.Where(ps...)
	return mfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mfd *MetadataFormatDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mfd.sqlExec, mfd.mutation, mfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mfd *MetadataFormatDelete) ExecX(ctx context.Context) int {
	n, err := mfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mfd *MetadataFormatDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(metadataformat.Table, sqlgraph.NewFieldSpec(metadataformat.FieldID, field.TypeInt64))
	if ps := mfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mfd.mutation.done = true
	return affected, err
}

// MetadataFormatDeleteOne is the builder for deleting a single MetadataFormat entity.
type MetadataFormatDeleteOne struct {
	mfd *MetadataFormatDelete
}

// Where appends a list predicates to the MetadataFormatDelete builder.
func (mfdo *MetadataFormatDeleteOne) Where(ps ...predicate.MetadataFormat) *MetadataFormatDeleteOne {
	mfdo.mfd.mutation.Where(ps...)
	return mfdo
}

// Exec executes the deletion query.
func (mfdo *MetadataFormatDeleteOne) Exec(ctx context.Context) error {
	n, err := mfdo.mfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{metadataformat.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mfdo *MetadataFormatDeleteOne) ExecX(ctx context.Context) {
	if err := mfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
