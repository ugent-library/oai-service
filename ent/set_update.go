// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/oai-service/ent/item"
	"github.com/ugent-library/oai-service/ent/predicate"
	"github.com/ugent-library/oai-service/ent/set"
)

// SetUpdate is the builder for updating Set entities.
type SetUpdate struct {
	config
	hooks    []Hook
	mutation *SetMutation
}

// Where appends a list predicates to the SetUpdate builder.
func (su *SetUpdate) Where(ps ...predicate.Set) *SetUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSpec sets the "spec" field.
func (su *SetUpdate) SetSpec(s string) *SetUpdate {
	su.mutation.SetSpec(s)
	return su
}

// SetName sets the "name" field.
func (su *SetUpdate) SetName(s string) *SetUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SetUpdate) SetDescription(s string) *SetUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SetUpdate) SetNillableDescription(s *string) *SetUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SetUpdate) ClearDescription() *SetUpdate {
	su.mutation.ClearDescription()
	return su
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (su *SetUpdate) AddItemIDs(ids ...int64) *SetUpdate {
	su.mutation.AddItemIDs(ids...)
	return su
}

// AddItems adds the "items" edges to the Item entity.
func (su *SetUpdate) AddItems(i ...*Item) *SetUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddItemIDs(ids...)
}

// Mutation returns the SetMutation object of the builder.
func (su *SetUpdate) Mutation() *SetMutation {
	return su.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (su *SetUpdate) ClearItems() *SetUpdate {
	su.mutation.ClearItems()
	return su
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (su *SetUpdate) RemoveItemIDs(ids ...int64) *SetUpdate {
	su.mutation.RemoveItemIDs(ids...)
	return su
}

// RemoveItems removes "items" edges to Item entities.
func (su *SetUpdate) RemoveItems(i ...*Item) *SetUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SetUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SetUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SetUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(set.Table, set.Columns, sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Spec(); ok {
		_spec.SetField(set.FieldSpec, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(set.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(set.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(set.FieldDescription, field.TypeString)
	}
	if su.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   set.ItemsTable,
			Columns: set.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedItemsIDs(); len(nodes) > 0 && !su.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   set.ItemsTable,
			Columns: set.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   set.ItemsTable,
			Columns: set.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{set.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SetUpdateOne is the builder for updating a single Set entity.
type SetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SetMutation
}

// SetSpec sets the "spec" field.
func (suo *SetUpdateOne) SetSpec(s string) *SetUpdateOne {
	suo.mutation.SetSpec(s)
	return suo
}

// SetName sets the "name" field.
func (suo *SetUpdateOne) SetName(s string) *SetUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SetUpdateOne) SetDescription(s string) *SetUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SetUpdateOne) SetNillableDescription(s *string) *SetUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SetUpdateOne) ClearDescription() *SetUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (suo *SetUpdateOne) AddItemIDs(ids ...int64) *SetUpdateOne {
	suo.mutation.AddItemIDs(ids...)
	return suo
}

// AddItems adds the "items" edges to the Item entity.
func (suo *SetUpdateOne) AddItems(i ...*Item) *SetUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddItemIDs(ids...)
}

// Mutation returns the SetMutation object of the builder.
func (suo *SetUpdateOne) Mutation() *SetMutation {
	return suo.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (suo *SetUpdateOne) ClearItems() *SetUpdateOne {
	suo.mutation.ClearItems()
	return suo
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (suo *SetUpdateOne) RemoveItemIDs(ids ...int64) *SetUpdateOne {
	suo.mutation.RemoveItemIDs(ids...)
	return suo
}

// RemoveItems removes "items" edges to Item entities.
func (suo *SetUpdateOne) RemoveItems(i ...*Item) *SetUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the SetUpdate builder.
func (suo *SetUpdateOne) Where(ps ...predicate.Set) *SetUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SetUpdateOne) Select(field string, fields ...string) *SetUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Set entity.
func (suo *SetUpdateOne) Save(ctx context.Context) (*Set, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SetUpdateOne) SaveX(ctx context.Context) *Set {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SetUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SetUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SetUpdateOne) sqlSave(ctx context.Context) (_node *Set, err error) {
	_spec := sqlgraph.NewUpdateSpec(set.Table, set.Columns, sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Set.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, set.FieldID)
		for _, f := range fields {
			if !set.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != set.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Spec(); ok {
		_spec.SetField(set.FieldSpec, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(set.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(set.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(set.FieldDescription, field.TypeString)
	}
	if suo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   set.ItemsTable,
			Columns: set.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !suo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   set.ItemsTable,
			Columns: set.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   set.ItemsTable,
			Columns: set.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Set{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{set.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
