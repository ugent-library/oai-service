// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugent-library/oai-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldID, id))
}

// MetadataFormatID applies equality check predicate on the "metadata_format_id" field. It's identical to MetadataFormatIDEQ.
func MetadataFormatID(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMetadataFormatID, v))
}

// ItemID applies equality check predicate on the "item_id" field. It's identical to ItemIDEQ.
func ItemID(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldItemID, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMetadata, v))
}

// Datestamp applies equality check predicate on the "datestamp" field. It's identical to DatestampEQ.
func Datestamp(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldDatestamp, v))
}

// MetadataFormatIDEQ applies the EQ predicate on the "metadata_format_id" field.
func MetadataFormatIDEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMetadataFormatID, v))
}

// MetadataFormatIDNEQ applies the NEQ predicate on the "metadata_format_id" field.
func MetadataFormatIDNEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldMetadataFormatID, v))
}

// MetadataFormatIDIn applies the In predicate on the "metadata_format_id" field.
func MetadataFormatIDIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldMetadataFormatID, vs...))
}

// MetadataFormatIDNotIn applies the NotIn predicate on the "metadata_format_id" field.
func MetadataFormatIDNotIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldMetadataFormatID, vs...))
}

// MetadataFormatIDGT applies the GT predicate on the "metadata_format_id" field.
func MetadataFormatIDGT(v string) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldMetadataFormatID, v))
}

// MetadataFormatIDGTE applies the GTE predicate on the "metadata_format_id" field.
func MetadataFormatIDGTE(v string) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldMetadataFormatID, v))
}

// MetadataFormatIDLT applies the LT predicate on the "metadata_format_id" field.
func MetadataFormatIDLT(v string) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldMetadataFormatID, v))
}

// MetadataFormatIDLTE applies the LTE predicate on the "metadata_format_id" field.
func MetadataFormatIDLTE(v string) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldMetadataFormatID, v))
}

// MetadataFormatIDContains applies the Contains predicate on the "metadata_format_id" field.
func MetadataFormatIDContains(v string) predicate.Record {
	return predicate.Record(sql.FieldContains(FieldMetadataFormatID, v))
}

// MetadataFormatIDHasPrefix applies the HasPrefix predicate on the "metadata_format_id" field.
func MetadataFormatIDHasPrefix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasPrefix(FieldMetadataFormatID, v))
}

// MetadataFormatIDHasSuffix applies the HasSuffix predicate on the "metadata_format_id" field.
func MetadataFormatIDHasSuffix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasSuffix(FieldMetadataFormatID, v))
}

// MetadataFormatIDEqualFold applies the EqualFold predicate on the "metadata_format_id" field.
func MetadataFormatIDEqualFold(v string) predicate.Record {
	return predicate.Record(sql.FieldEqualFold(FieldMetadataFormatID, v))
}

// MetadataFormatIDContainsFold applies the ContainsFold predicate on the "metadata_format_id" field.
func MetadataFormatIDContainsFold(v string) predicate.Record {
	return predicate.Record(sql.FieldContainsFold(FieldMetadataFormatID, v))
}

// ItemIDEQ applies the EQ predicate on the "item_id" field.
func ItemIDEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldItemID, v))
}

// ItemIDNEQ applies the NEQ predicate on the "item_id" field.
func ItemIDNEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldItemID, v))
}

// ItemIDIn applies the In predicate on the "item_id" field.
func ItemIDIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldItemID, vs...))
}

// ItemIDNotIn applies the NotIn predicate on the "item_id" field.
func ItemIDNotIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldItemID, vs...))
}

// ItemIDGT applies the GT predicate on the "item_id" field.
func ItemIDGT(v string) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldItemID, v))
}

// ItemIDGTE applies the GTE predicate on the "item_id" field.
func ItemIDGTE(v string) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldItemID, v))
}

// ItemIDLT applies the LT predicate on the "item_id" field.
func ItemIDLT(v string) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldItemID, v))
}

// ItemIDLTE applies the LTE predicate on the "item_id" field.
func ItemIDLTE(v string) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldItemID, v))
}

// ItemIDContains applies the Contains predicate on the "item_id" field.
func ItemIDContains(v string) predicate.Record {
	return predicate.Record(sql.FieldContains(FieldItemID, v))
}

// ItemIDHasPrefix applies the HasPrefix predicate on the "item_id" field.
func ItemIDHasPrefix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasPrefix(FieldItemID, v))
}

// ItemIDHasSuffix applies the HasSuffix predicate on the "item_id" field.
func ItemIDHasSuffix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasSuffix(FieldItemID, v))
}

// ItemIDEqualFold applies the EqualFold predicate on the "item_id" field.
func ItemIDEqualFold(v string) predicate.Record {
	return predicate.Record(sql.FieldEqualFold(FieldItemID, v))
}

// ItemIDContainsFold applies the ContainsFold predicate on the "item_id" field.
func ItemIDContainsFold(v string) predicate.Record {
	return predicate.Record(sql.FieldContainsFold(FieldItemID, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.Record {
	return predicate.Record(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Record {
	return predicate.Record(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Record {
	return predicate.Record(sql.FieldNotNull(FieldMetadata))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.Record {
	return predicate.Record(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.Record {
	return predicate.Record(sql.FieldContainsFold(FieldMetadata, v))
}

// DatestampEQ applies the EQ predicate on the "datestamp" field.
func DatestampEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldDatestamp, v))
}

// DatestampNEQ applies the NEQ predicate on the "datestamp" field.
func DatestampNEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldDatestamp, v))
}

// DatestampIn applies the In predicate on the "datestamp" field.
func DatestampIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldDatestamp, vs...))
}

// DatestampNotIn applies the NotIn predicate on the "datestamp" field.
func DatestampNotIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldDatestamp, vs...))
}

// DatestampGT applies the GT predicate on the "datestamp" field.
func DatestampGT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldDatestamp, v))
}

// DatestampGTE applies the GTE predicate on the "datestamp" field.
func DatestampGTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldDatestamp, v))
}

// DatestampLT applies the LT predicate on the "datestamp" field.
func DatestampLT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldDatestamp, v))
}

// DatestampLTE applies the LTE predicate on the "datestamp" field.
func DatestampLTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldDatestamp, v))
}

// HasMetadataFormat applies the HasEdge predicate on the "metadata_format" edge.
func HasMetadataFormat() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MetadataFormatTable, MetadataFormatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataFormatWith applies the HasEdge predicate on the "metadata_format" edge with a given conditions (other predicates).
func HasMetadataFormatWith(preds ...predicate.MetadataFormat) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := newMetadataFormatStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItem applies the HasEdge predicate on the "item" edge.
func HasItem() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemWith applies the HasEdge predicate on the "item" edge with a given conditions (other predicates).
func HasItemWith(preds ...predicate.Item) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := newItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		p(s.Not())
	})
}
