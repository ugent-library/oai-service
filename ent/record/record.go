// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the record type in the database.
	Label = "record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMetadataFormatID holds the string denoting the metadata_format_id field in the database.
	FieldMetadataFormatID = "metadata_format_id"
	// FieldItemID holds the string denoting the item_id field in the database.
	FieldItemID = "item_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldDatestamp holds the string denoting the datestamp field in the database.
	FieldDatestamp = "datestamp"
	// EdgeMetadataFormat holds the string denoting the metadata_format edge name in mutations.
	EdgeMetadataFormat = "metadata_format"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// Table holds the table name of the record in the database.
	Table = "records"
	// MetadataFormatTable is the table that holds the metadata_format relation/edge.
	MetadataFormatTable = "records"
	// MetadataFormatInverseTable is the table name for the MetadataFormat entity.
	// It exists in this package in order to avoid circular dependency with the "metadataformat" package.
	MetadataFormatInverseTable = "metadata_formats"
	// MetadataFormatColumn is the table column denoting the metadata_format relation/edge.
	MetadataFormatColumn = "metadata_format_id"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "records"
	// ItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemInverseTable = "items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_id"
)

// Columns holds all SQL columns for record fields.
var Columns = []string{
	FieldID,
	FieldMetadataFormatID,
	FieldItemID,
	FieldMetadata,
	FieldDatestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDatestamp holds the default value on creation for the "datestamp" field.
	DefaultDatestamp func() time.Time
)

// OrderOption defines the ordering options for the Record queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMetadataFormatID orders the results by the metadata_format_id field.
func ByMetadataFormatID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadataFormatID, opts...).ToFunc()
}

// ByItemID orders the results by the item_id field.
func ByItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemID, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByDatestamp orders the results by the datestamp field.
func ByDatestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatestamp, opts...).ToFunc()
}

// ByMetadataFormatField orders the results by metadata_format field.
func ByMetadataFormatField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataFormatStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemField orders the results by item field.
func ByItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemStep(), sql.OrderByField(field, opts...))
	}
}
func newMetadataFormatStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataFormatInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MetadataFormatTable, MetadataFormatColumn),
	)
}
func newItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ItemTable, ItemColumn),
	)
}
