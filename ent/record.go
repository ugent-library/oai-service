// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/oai-service/ent/item"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/record"
)

// Record is the model entity for the Record schema.
type Record struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// MetadataFormatID holds the value of the "metadata_format_id" field.
	MetadataFormatID string `json:"metadata_format_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID string `json:"item_id,omitempty"`
	// A record with NULL metadata is considered deleted.
	Metadata *string `json:"metadata,omitempty"`
	// Datestamp holds the value of the "datestamp" field.
	Datestamp time.Time `json:"datestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordQuery when eager-loading is set.
	Edges        RecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecordEdges holds the relations/edges for other nodes in the graph.
type RecordEdges struct {
	// MetadataFormat holds the value of the metadata_format edge.
	MetadataFormat *MetadataFormat `json:"metadata_format,omitempty"`
	// Item holds the value of the item edge.
	Item *Item `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MetadataFormatOrErr returns the MetadataFormat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) MetadataFormatOrErr() (*MetadataFormat, error) {
	if e.loadedTypes[0] {
		if e.MetadataFormat == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: metadataformat.Label}
		}
		return e.MetadataFormat, nil
	}
	return nil, &NotLoadedError{edge: "metadata_format"}
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) ItemOrErr() (*Item, error) {
	if e.loadedTypes[1] {
		if e.Item == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			values[i] = new(sql.NullInt64)
		case record.FieldMetadataFormatID, record.FieldItemID, record.FieldMetadata:
			values[i] = new(sql.NullString)
		case record.FieldDatestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case record.FieldMetadataFormatID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_format_id", values[i])
			} else if value.Valid {
				r.MetadataFormatID = value.String
			}
		case record.FieldItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				r.ItemID = value.String
			}
		case record.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				r.Metadata = new(string)
				*r.Metadata = value.String
			}
		case record.FieldDatestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field datestamp", values[i])
			} else if value.Valid {
				r.Datestamp = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Record.
// This includes values selected through modifiers, order, etc.
func (r *Record) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryMetadataFormat queries the "metadata_format" edge of the Record entity.
func (r *Record) QueryMetadataFormat() *MetadataFormatQuery {
	return NewRecordClient(r.config).QueryMetadataFormat(r)
}

// QueryItem queries the "item" edge of the Record entity.
func (r *Record) QueryItem() *ItemQuery {
	return NewRecordClient(r.config).QueryItem(r)
}

// Update returns a builder for updating this Record.
// Note that you need to call Record.Unwrap() before calling this method if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return NewRecordClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Record entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Record is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("metadata_format_id=")
	builder.WriteString(r.MetadataFormatID)
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(r.ItemID)
	builder.WriteString(", ")
	if v := r.Metadata; v != nil {
		builder.WriteString("metadata=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("datestamp=")
	builder.WriteString(r.Datestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record
