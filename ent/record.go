// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/record"
)

// Record is the model entity for the Record schema.
type Record struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MetadataFormatID holds the value of the "metadata_format_id" field.
	MetadataFormatID int `json:"metadata_format_id,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// Datestamp holds the value of the "datestamp" field.
	Datestamp time.Time `json:"datestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordQuery when eager-loading is set.
	Edges RecordEdges `json:"edges"`
}

// RecordEdges holds the relations/edges for other nodes in the graph.
type RecordEdges struct {
	// MetadataFormat holds the value of the metadata_format edge.
	MetadataFormat *MetadataFormat `json:"metadata_format,omitempty"`
	// Sets holds the value of the sets edge.
	Sets []*Set `json:"sets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MetadataFormatOrErr returns the MetadataFormat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) MetadataFormatOrErr() (*MetadataFormat, error) {
	if e.loadedTypes[0] {
		if e.MetadataFormat == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: metadataformat.Label}
		}
		return e.MetadataFormat, nil
	}
	return nil, &NotLoadedError{edge: "metadata_format"}
}

// SetsOrErr returns the Sets value or an error if the edge
// was not loaded in eager-loading.
func (e RecordEdges) SetsOrErr() ([]*Set, error) {
	if e.loadedTypes[1] {
		return e.Sets, nil
	}
	return nil, &NotLoadedError{edge: "sets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case record.FieldDeleted:
			values[i] = new(sql.NullBool)
		case record.FieldID, record.FieldMetadataFormatID:
			values[i] = new(sql.NullInt64)
		case record.FieldIdentifier, record.FieldMetadata:
			values[i] = new(sql.NullString)
		case record.FieldDatestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Record", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case record.FieldMetadataFormatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_format_id", values[i])
			} else if value.Valid {
				r.MetadataFormatID = int(value.Int64)
			}
		case record.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				r.Identifier = value.String
			}
		case record.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				r.Metadata = value.String
			}
		case record.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				r.Deleted = value.Bool
			}
		case record.FieldDatestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field datestamp", values[i])
			} else if value.Valid {
				r.Datestamp = value.Time
			}
		}
	}
	return nil
}

// QueryMetadataFormat queries the "metadata_format" edge of the Record entity.
func (r *Record) QueryMetadataFormat() *MetadataFormatQuery {
	return (&RecordClient{config: r.config}).QueryMetadataFormat(r)
}

// QuerySets queries the "sets" edge of the Record entity.
func (r *Record) QuerySets() *SetQuery {
	return (&RecordClient{config: r.config}).QuerySets(r)
}

// Update returns a builder for updating this Record.
// Note that you need to call Record.Unwrap() before calling this method if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return (&RecordClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Record entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Record is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("metadata_format_id=")
	builder.WriteString(fmt.Sprintf("%v", r.MetadataFormatID))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(r.Identifier)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(r.Metadata)
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", r.Deleted))
	builder.WriteString(", ")
	builder.WriteString("datestamp=")
	builder.WriteString(r.Datestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record

func (r Records) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
