// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ItemsColumns holds the columns for the "items" table.
	ItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
	}
	// ItemsTable holds the schema information for the "items" table.
	ItemsTable = &schema.Table{
		Name:       "items",
		Columns:    ItemsColumns,
		PrimaryKey: []*schema.Column{ItemsColumns[0]},
	}
	// MetadataFormatsColumns holds the columns for the "metadata_formats" table.
	MetadataFormatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "schema", Type: field.TypeString},
		{Name: "namespace", Type: field.TypeString},
	}
	// MetadataFormatsTable holds the schema information for the "metadata_formats" table.
	MetadataFormatsTable = &schema.Table{
		Name:       "metadata_formats",
		Columns:    MetadataFormatsColumns,
		PrimaryKey: []*schema.Column{MetadataFormatsColumns[0]},
	}
	// RecordsColumns holds the columns for the "records" table.
	RecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "metadata", Type: field.TypeString, Nullable: true},
		{Name: "datestamp", Type: field.TypeTime},
		{Name: "item_id", Type: field.TypeString},
		{Name: "metadata_format_id", Type: field.TypeString},
	}
	// RecordsTable holds the schema information for the "records" table.
	RecordsTable = &schema.Table{
		Name:       "records",
		Columns:    RecordsColumns,
		PrimaryKey: []*schema.Column{RecordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "records_items_records",
				Columns:    []*schema.Column{RecordsColumns[3]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "records_metadata_formats_records",
				Columns:    []*schema.Column{RecordsColumns[4]},
				RefColumns: []*schema.Column{MetadataFormatsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "record_metadata_format_id_item_id",
				Unique:  true,
				Columns: []*schema.Column{RecordsColumns[4], RecordsColumns[3]},
			},
			{
				Name:    "record_datestamp",
				Unique:  false,
				Columns: []*schema.Column{RecordsColumns[2]},
			},
		},
	}
	// SetsColumns holds the columns for the "sets" table.
	SetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// SetsTable holds the schema information for the "sets" table.
	SetsTable = &schema.Table{
		Name:       "sets",
		Columns:    SetsColumns,
		PrimaryKey: []*schema.Column{SetsColumns[0]},
	}
	// ItemSetsColumns holds the columns for the "item_sets" table.
	ItemSetsColumns = []*schema.Column{
		{Name: "item_id", Type: field.TypeString},
		{Name: "set_id", Type: field.TypeString},
	}
	// ItemSetsTable holds the schema information for the "item_sets" table.
	ItemSetsTable = &schema.Table{
		Name:       "item_sets",
		Columns:    ItemSetsColumns,
		PrimaryKey: []*schema.Column{ItemSetsColumns[0], ItemSetsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "item_sets_item_id",
				Columns:    []*schema.Column{ItemSetsColumns[0]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "item_sets_set_id",
				Columns:    []*schema.Column{ItemSetsColumns[1]},
				RefColumns: []*schema.Column{SetsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ItemsTable,
		MetadataFormatsTable,
		RecordsTable,
		SetsTable,
		ItemSetsTable,
	}
)

func init() {
	RecordsTable.ForeignKeys[0].RefTable = ItemsTable
	RecordsTable.ForeignKeys[1].RefTable = MetadataFormatsTable
	ItemSetsTable.ForeignKeys[0].RefTable = ItemsTable
	ItemSetsTable.ForeignKeys[1].RefTable = SetsTable
}
