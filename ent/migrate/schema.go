// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// MetadataColumns holds the columns for the "metadata" table.
	MetadataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "content", Type: field.TypeString},
		{Name: "datestamp", Type: field.TypeTime},
		{Name: "metadata_format_id", Type: field.TypeInt64},
		{Name: "record_id", Type: field.TypeInt64},
	}
	// MetadataTable holds the schema information for the "metadata" table.
	MetadataTable = &schema.Table{
		Name:       "metadata",
		Columns:    MetadataColumns,
		PrimaryKey: []*schema.Column{MetadataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "metadata_metadata_formats_metadata",
				Columns:    []*schema.Column{MetadataColumns[3]},
				RefColumns: []*schema.Column{MetadataFormatsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "metadata_records_metadata",
				Columns:    []*schema.Column{MetadataColumns[4]},
				RefColumns: []*schema.Column{RecordsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "metadata_record_id_metadata_format_id",
				Unique:  true,
				Columns: []*schema.Column{MetadataColumns[4], MetadataColumns[3]},
			},
			{
				Name:    "metadata_datestamp",
				Unique:  false,
				Columns: []*schema.Column{MetadataColumns[2]},
			},
		},
	}
	// MetadataFormatsColumns holds the columns for the "metadata_formats" table.
	MetadataFormatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "metadata_prefix", Type: field.TypeString, Unique: true},
		{Name: "schema", Type: field.TypeString},
		{Name: "metadata_namespace", Type: field.TypeString},
	}
	// MetadataFormatsTable holds the schema information for the "metadata_formats" table.
	MetadataFormatsTable = &schema.Table{
		Name:       "metadata_formats",
		Columns:    MetadataFormatsColumns,
		PrimaryKey: []*schema.Column{MetadataFormatsColumns[0]},
	}
	// RecordsColumns holds the columns for the "records" table.
	RecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "identifier", Type: field.TypeString},
		{Name: "deleted", Type: field.TypeBool, Default: false},
	}
	// RecordsTable holds the schema information for the "records" table.
	RecordsTable = &schema.Table{
		Name:       "records",
		Columns:    RecordsColumns,
		PrimaryKey: []*schema.Column{RecordsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "record_identifier",
				Unique:  true,
				Columns: []*schema.Column{RecordsColumns[1]},
			},
		},
	}
	// SetsColumns holds the columns for the "sets" table.
	SetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "set_spec", Type: field.TypeString, Unique: true},
		{Name: "set_name", Type: field.TypeString},
		{Name: "set_description", Type: field.TypeString, Nullable: true},
	}
	// SetsTable holds the schema information for the "sets" table.
	SetsTable = &schema.Table{
		Name:       "sets",
		Columns:    SetsColumns,
		PrimaryKey: []*schema.Column{SetsColumns[0]},
	}
	// RecordSetsColumns holds the columns for the "record_sets" table.
	RecordSetsColumns = []*schema.Column{
		{Name: "record_id", Type: field.TypeInt64},
		{Name: "set_id", Type: field.TypeInt64},
	}
	// RecordSetsTable holds the schema information for the "record_sets" table.
	RecordSetsTable = &schema.Table{
		Name:       "record_sets",
		Columns:    RecordSetsColumns,
		PrimaryKey: []*schema.Column{RecordSetsColumns[0], RecordSetsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "record_sets_record_id",
				Columns:    []*schema.Column{RecordSetsColumns[0]},
				RefColumns: []*schema.Column{RecordsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "record_sets_set_id",
				Columns:    []*schema.Column{RecordSetsColumns[1]},
				RefColumns: []*schema.Column{SetsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		MetadataTable,
		MetadataFormatsTable,
		RecordsTable,
		SetsTable,
		RecordSetsTable,
	}
)

func init() {
	MetadataTable.ForeignKeys[0].RefTable = MetadataFormatsTable
	MetadataTable.ForeignKeys[1].RefTable = RecordsTable
	MetadataTable.Annotation = &entsql.Annotation{
		Table: "metadata",
	}
	RecordSetsTable.ForeignKeys[0].RefTable = RecordsTable
	RecordSetsTable.ForeignKeys[1].RefTable = SetsTable
}
