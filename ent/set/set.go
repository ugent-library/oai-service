// Code generated by ent, DO NOT EDIT.

package set

const (
	// Label holds the string label denoting the set type in the database.
	Label = "set"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSpec holds the string denoting the spec field in the database.
	FieldSpec = "spec"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the set in the database.
	Table = "sets"
	// RecordsTable is the table that holds the records relation/edge. The primary key declared below.
	RecordsTable = "set_records"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
)

// Columns holds all SQL columns for set fields.
var Columns = []string{
	FieldID,
	FieldSpec,
	FieldName,
	FieldDescription,
}

var (
	// RecordsPrimaryKey and RecordsColumn2 are the table columns denoting the
	// primary key for the records relation (M2M).
	RecordsPrimaryKey = []string{"set_id", "record_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
