// Code generated by ent, DO NOT EDIT.

package set

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the set type in the database.
	Label = "set"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSetSpec holds the string denoting the set_spec field in the database.
	FieldSetSpec = "set_spec"
	// FieldSetName holds the string denoting the set_name field in the database.
	FieldSetName = "set_name"
	// FieldSetDescription holds the string denoting the set_description field in the database.
	FieldSetDescription = "set_description"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the set in the database.
	Table = "sets"
	// RecordsTable is the table that holds the records relation/edge. The primary key declared below.
	RecordsTable = "record_sets"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
)

// Columns holds all SQL columns for set fields.
var Columns = []string{
	FieldID,
	FieldSetSpec,
	FieldSetName,
	FieldSetDescription,
}

var (
	// RecordsPrimaryKey and RecordsColumn2 are the table columns denoting the
	// primary key for the records relation (M2M).
	RecordsPrimaryKey = []string{"record_id", "set_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Set queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySetSpec orders the results by the set_spec field.
func BySetSpec(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSetSpec, opts...).ToFunc()
}

// BySetName orders the results by the set_name field.
func BySetName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSetName, opts...).ToFunc()
}

// BySetDescription orders the results by the set_description field.
func BySetDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSetDescription, opts...).ToFunc()
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RecordsTable, RecordsPrimaryKey...),
	)
}
