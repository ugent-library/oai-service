// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/predicate"
	"github.com/ugent-library/oai-service/ent/record"
	"github.com/ugent-library/oai-service/ent/set"
)

// RecordUpdate is the builder for updating Record entities.
type RecordUpdate struct {
	config
	hooks    []Hook
	mutation *RecordMutation
}

// Where appends a list predicates to the RecordUpdate builder.
func (ru *RecordUpdate) Where(ps ...predicate.Record) *RecordUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetMetadataFormatID sets the "metadata_format_id" field.
func (ru *RecordUpdate) SetMetadataFormatID(i int64) *RecordUpdate {
	ru.mutation.SetMetadataFormatID(i)
	return ru
}

// SetIdentifier sets the "identifier" field.
func (ru *RecordUpdate) SetIdentifier(s string) *RecordUpdate {
	ru.mutation.SetIdentifier(s)
	return ru
}

// SetMetadata sets the "metadata" field.
func (ru *RecordUpdate) SetMetadata(s string) *RecordUpdate {
	ru.mutation.SetMetadata(s)
	return ru
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableMetadata(s *string) *RecordUpdate {
	if s != nil {
		ru.SetMetadata(*s)
	}
	return ru
}

// ClearMetadata clears the value of the "metadata" field.
func (ru *RecordUpdate) ClearMetadata() *RecordUpdate {
	ru.mutation.ClearMetadata()
	return ru
}

// SetDeleted sets the "deleted" field.
func (ru *RecordUpdate) SetDeleted(b bool) *RecordUpdate {
	ru.mutation.SetDeleted(b)
	return ru
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableDeleted(b *bool) *RecordUpdate {
	if b != nil {
		ru.SetDeleted(*b)
	}
	return ru
}

// SetDatestamp sets the "datestamp" field.
func (ru *RecordUpdate) SetDatestamp(t time.Time) *RecordUpdate {
	ru.mutation.SetDatestamp(t)
	return ru
}

// SetMetadataFormat sets the "metadata_format" edge to the MetadataFormat entity.
func (ru *RecordUpdate) SetMetadataFormat(m *MetadataFormat) *RecordUpdate {
	return ru.SetMetadataFormatID(m.ID)
}

// AddSetIDs adds the "sets" edge to the Set entity by IDs.
func (ru *RecordUpdate) AddSetIDs(ids ...int64) *RecordUpdate {
	ru.mutation.AddSetIDs(ids...)
	return ru
}

// AddSets adds the "sets" edges to the Set entity.
func (ru *RecordUpdate) AddSets(s ...*Set) *RecordUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSetIDs(ids...)
}

// Mutation returns the RecordMutation object of the builder.
func (ru *RecordUpdate) Mutation() *RecordMutation {
	return ru.mutation
}

// ClearMetadataFormat clears the "metadata_format" edge to the MetadataFormat entity.
func (ru *RecordUpdate) ClearMetadataFormat() *RecordUpdate {
	ru.mutation.ClearMetadataFormat()
	return ru
}

// ClearSets clears all "sets" edges to the Set entity.
func (ru *RecordUpdate) ClearSets() *RecordUpdate {
	ru.mutation.ClearSets()
	return ru
}

// RemoveSetIDs removes the "sets" edge to Set entities by IDs.
func (ru *RecordUpdate) RemoveSetIDs(ids ...int64) *RecordUpdate {
	ru.mutation.RemoveSetIDs(ids...)
	return ru
}

// RemoveSets removes "sets" edges to Set entities.
func (ru *RecordUpdate) RemoveSets(s ...*Set) *RecordUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecordUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecordUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecordUpdate) defaults() {
	if _, ok := ru.mutation.Datestamp(); !ok {
		v := record.UpdateDefaultDatestamp()
		ru.mutation.SetDatestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RecordUpdate) check() error {
	if _, ok := ru.mutation.MetadataFormatID(); ru.mutation.MetadataFormatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Record.metadata_format"`)
	}
	return nil
}

func (ru *RecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   record.Table,
			Columns: record.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: record.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Identifier(); ok {
		_spec.SetField(record.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := ru.mutation.Metadata(); ok {
		_spec.SetField(record.FieldMetadata, field.TypeString, value)
	}
	if ru.mutation.MetadataCleared() {
		_spec.ClearField(record.FieldMetadata, field.TypeString)
	}
	if value, ok := ru.mutation.Deleted(); ok {
		_spec.SetField(record.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Datestamp(); ok {
		_spec.SetField(record.FieldDatestamp, field.TypeTime, value)
	}
	if ru.mutation.MetadataFormatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MetadataFormatTable,
			Columns: []string{record.MetadataFormatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: metadataformat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MetadataFormatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MetadataFormatTable,
			Columns: []string{record.MetadataFormatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: metadataformat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   record.SetsTable,
			Columns: record.SetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: set.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSetsIDs(); len(nodes) > 0 && !ru.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   record.SetsTable,
			Columns: record.SetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   record.SetsTable,
			Columns: record.SetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RecordUpdateOne is the builder for updating a single Record entity.
type RecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecordMutation
}

// SetMetadataFormatID sets the "metadata_format_id" field.
func (ruo *RecordUpdateOne) SetMetadataFormatID(i int64) *RecordUpdateOne {
	ruo.mutation.SetMetadataFormatID(i)
	return ruo
}

// SetIdentifier sets the "identifier" field.
func (ruo *RecordUpdateOne) SetIdentifier(s string) *RecordUpdateOne {
	ruo.mutation.SetIdentifier(s)
	return ruo
}

// SetMetadata sets the "metadata" field.
func (ruo *RecordUpdateOne) SetMetadata(s string) *RecordUpdateOne {
	ruo.mutation.SetMetadata(s)
	return ruo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableMetadata(s *string) *RecordUpdateOne {
	if s != nil {
		ruo.SetMetadata(*s)
	}
	return ruo
}

// ClearMetadata clears the value of the "metadata" field.
func (ruo *RecordUpdateOne) ClearMetadata() *RecordUpdateOne {
	ruo.mutation.ClearMetadata()
	return ruo
}

// SetDeleted sets the "deleted" field.
func (ruo *RecordUpdateOne) SetDeleted(b bool) *RecordUpdateOne {
	ruo.mutation.SetDeleted(b)
	return ruo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableDeleted(b *bool) *RecordUpdateOne {
	if b != nil {
		ruo.SetDeleted(*b)
	}
	return ruo
}

// SetDatestamp sets the "datestamp" field.
func (ruo *RecordUpdateOne) SetDatestamp(t time.Time) *RecordUpdateOne {
	ruo.mutation.SetDatestamp(t)
	return ruo
}

// SetMetadataFormat sets the "metadata_format" edge to the MetadataFormat entity.
func (ruo *RecordUpdateOne) SetMetadataFormat(m *MetadataFormat) *RecordUpdateOne {
	return ruo.SetMetadataFormatID(m.ID)
}

// AddSetIDs adds the "sets" edge to the Set entity by IDs.
func (ruo *RecordUpdateOne) AddSetIDs(ids ...int64) *RecordUpdateOne {
	ruo.mutation.AddSetIDs(ids...)
	return ruo
}

// AddSets adds the "sets" edges to the Set entity.
func (ruo *RecordUpdateOne) AddSets(s ...*Set) *RecordUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSetIDs(ids...)
}

// Mutation returns the RecordMutation object of the builder.
func (ruo *RecordUpdateOne) Mutation() *RecordMutation {
	return ruo.mutation
}

// ClearMetadataFormat clears the "metadata_format" edge to the MetadataFormat entity.
func (ruo *RecordUpdateOne) ClearMetadataFormat() *RecordUpdateOne {
	ruo.mutation.ClearMetadataFormat()
	return ruo
}

// ClearSets clears all "sets" edges to the Set entity.
func (ruo *RecordUpdateOne) ClearSets() *RecordUpdateOne {
	ruo.mutation.ClearSets()
	return ruo
}

// RemoveSetIDs removes the "sets" edge to Set entities by IDs.
func (ruo *RecordUpdateOne) RemoveSetIDs(ids ...int64) *RecordUpdateOne {
	ruo.mutation.RemoveSetIDs(ids...)
	return ruo
}

// RemoveSets removes "sets" edges to Set entities.
func (ruo *RecordUpdateOne) RemoveSets(s ...*Set) *RecordUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSetIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecordUpdateOne) Select(field string, fields ...string) *RecordUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Record entity.
func (ruo *RecordUpdateOne) Save(ctx context.Context) (*Record, error) {
	var (
		err  error
		node *Record
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Record)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecordUpdateOne) SaveX(ctx context.Context) *Record {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecordUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecordUpdateOne) defaults() {
	if _, ok := ruo.mutation.Datestamp(); !ok {
		v := record.UpdateDefaultDatestamp()
		ruo.mutation.SetDatestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RecordUpdateOne) check() error {
	if _, ok := ruo.mutation.MetadataFormatID(); ruo.mutation.MetadataFormatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Record.metadata_format"`)
	}
	return nil
}

func (ruo *RecordUpdateOne) sqlSave(ctx context.Context) (_node *Record, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   record.Table,
			Columns: record.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: record.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Record.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, record.FieldID)
		for _, f := range fields {
			if !record.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != record.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Identifier(); ok {
		_spec.SetField(record.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Metadata(); ok {
		_spec.SetField(record.FieldMetadata, field.TypeString, value)
	}
	if ruo.mutation.MetadataCleared() {
		_spec.ClearField(record.FieldMetadata, field.TypeString)
	}
	if value, ok := ruo.mutation.Deleted(); ok {
		_spec.SetField(record.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Datestamp(); ok {
		_spec.SetField(record.FieldDatestamp, field.TypeTime, value)
	}
	if ruo.mutation.MetadataFormatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MetadataFormatTable,
			Columns: []string{record.MetadataFormatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: metadataformat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MetadataFormatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MetadataFormatTable,
			Columns: []string{record.MetadataFormatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: metadataformat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   record.SetsTable,
			Columns: record.SetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: set.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSetsIDs(); len(nodes) > 0 && !ruo.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   record.SetsTable,
			Columns: record.SetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   record.SetsTable,
			Columns: record.SetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Record{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
