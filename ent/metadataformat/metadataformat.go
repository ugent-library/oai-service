// Code generated by ent, DO NOT EDIT.

package metadataformat

const (
	// Label holds the string label denoting the metadataformat type in the database.
	Label = "metadata_format"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrefix holds the string denoting the prefix field in the database.
	FieldPrefix = "prefix"
	// FieldSchema holds the string denoting the schema field in the database.
	FieldSchema = "schema"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the metadataformat in the database.
	Table = "metadata_formats"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "records"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "metadata_format_id"
)

// Columns holds all SQL columns for metadataformat fields.
var Columns = []string{
	FieldID,
	FieldPrefix,
	FieldSchema,
	FieldNamespace,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
