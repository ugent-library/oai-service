// Code generated by ent, DO NOT EDIT.

package metadataformat

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugent-library/oai-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLTE(FieldID, id))
}

// MetadataPrefix applies equality check predicate on the "metadata_prefix" field. It's identical to MetadataPrefixEQ.
func MetadataPrefix(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldMetadataPrefix, v))
}

// Schema applies equality check predicate on the "schema" field. It's identical to SchemaEQ.
func Schema(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldSchema, v))
}

// MetadataNamespace applies equality check predicate on the "metadata_namespace" field. It's identical to MetadataNamespaceEQ.
func MetadataNamespace(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldMetadataNamespace, v))
}

// MetadataPrefixEQ applies the EQ predicate on the "metadata_prefix" field.
func MetadataPrefixEQ(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldMetadataPrefix, v))
}

// MetadataPrefixNEQ applies the NEQ predicate on the "metadata_prefix" field.
func MetadataPrefixNEQ(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNEQ(FieldMetadataPrefix, v))
}

// MetadataPrefixIn applies the In predicate on the "metadata_prefix" field.
func MetadataPrefixIn(vs ...string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldIn(FieldMetadataPrefix, vs...))
}

// MetadataPrefixNotIn applies the NotIn predicate on the "metadata_prefix" field.
func MetadataPrefixNotIn(vs ...string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNotIn(FieldMetadataPrefix, vs...))
}

// MetadataPrefixGT applies the GT predicate on the "metadata_prefix" field.
func MetadataPrefixGT(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGT(FieldMetadataPrefix, v))
}

// MetadataPrefixGTE applies the GTE predicate on the "metadata_prefix" field.
func MetadataPrefixGTE(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGTE(FieldMetadataPrefix, v))
}

// MetadataPrefixLT applies the LT predicate on the "metadata_prefix" field.
func MetadataPrefixLT(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLT(FieldMetadataPrefix, v))
}

// MetadataPrefixLTE applies the LTE predicate on the "metadata_prefix" field.
func MetadataPrefixLTE(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLTE(FieldMetadataPrefix, v))
}

// MetadataPrefixContains applies the Contains predicate on the "metadata_prefix" field.
func MetadataPrefixContains(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldContains(FieldMetadataPrefix, v))
}

// MetadataPrefixHasPrefix applies the HasPrefix predicate on the "metadata_prefix" field.
func MetadataPrefixHasPrefix(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldHasPrefix(FieldMetadataPrefix, v))
}

// MetadataPrefixHasSuffix applies the HasSuffix predicate on the "metadata_prefix" field.
func MetadataPrefixHasSuffix(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldHasSuffix(FieldMetadataPrefix, v))
}

// MetadataPrefixEqualFold applies the EqualFold predicate on the "metadata_prefix" field.
func MetadataPrefixEqualFold(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEqualFold(FieldMetadataPrefix, v))
}

// MetadataPrefixContainsFold applies the ContainsFold predicate on the "metadata_prefix" field.
func MetadataPrefixContainsFold(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldContainsFold(FieldMetadataPrefix, v))
}

// SchemaEQ applies the EQ predicate on the "schema" field.
func SchemaEQ(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldSchema, v))
}

// SchemaNEQ applies the NEQ predicate on the "schema" field.
func SchemaNEQ(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNEQ(FieldSchema, v))
}

// SchemaIn applies the In predicate on the "schema" field.
func SchemaIn(vs ...string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldIn(FieldSchema, vs...))
}

// SchemaNotIn applies the NotIn predicate on the "schema" field.
func SchemaNotIn(vs ...string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNotIn(FieldSchema, vs...))
}

// SchemaGT applies the GT predicate on the "schema" field.
func SchemaGT(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGT(FieldSchema, v))
}

// SchemaGTE applies the GTE predicate on the "schema" field.
func SchemaGTE(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGTE(FieldSchema, v))
}

// SchemaLT applies the LT predicate on the "schema" field.
func SchemaLT(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLT(FieldSchema, v))
}

// SchemaLTE applies the LTE predicate on the "schema" field.
func SchemaLTE(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLTE(FieldSchema, v))
}

// SchemaContains applies the Contains predicate on the "schema" field.
func SchemaContains(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldContains(FieldSchema, v))
}

// SchemaHasPrefix applies the HasPrefix predicate on the "schema" field.
func SchemaHasPrefix(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldHasPrefix(FieldSchema, v))
}

// SchemaHasSuffix applies the HasSuffix predicate on the "schema" field.
func SchemaHasSuffix(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldHasSuffix(FieldSchema, v))
}

// SchemaEqualFold applies the EqualFold predicate on the "schema" field.
func SchemaEqualFold(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEqualFold(FieldSchema, v))
}

// SchemaContainsFold applies the ContainsFold predicate on the "schema" field.
func SchemaContainsFold(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldContainsFold(FieldSchema, v))
}

// MetadataNamespaceEQ applies the EQ predicate on the "metadata_namespace" field.
func MetadataNamespaceEQ(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEQ(FieldMetadataNamespace, v))
}

// MetadataNamespaceNEQ applies the NEQ predicate on the "metadata_namespace" field.
func MetadataNamespaceNEQ(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNEQ(FieldMetadataNamespace, v))
}

// MetadataNamespaceIn applies the In predicate on the "metadata_namespace" field.
func MetadataNamespaceIn(vs ...string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldIn(FieldMetadataNamespace, vs...))
}

// MetadataNamespaceNotIn applies the NotIn predicate on the "metadata_namespace" field.
func MetadataNamespaceNotIn(vs ...string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldNotIn(FieldMetadataNamespace, vs...))
}

// MetadataNamespaceGT applies the GT predicate on the "metadata_namespace" field.
func MetadataNamespaceGT(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGT(FieldMetadataNamespace, v))
}

// MetadataNamespaceGTE applies the GTE predicate on the "metadata_namespace" field.
func MetadataNamespaceGTE(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldGTE(FieldMetadataNamespace, v))
}

// MetadataNamespaceLT applies the LT predicate on the "metadata_namespace" field.
func MetadataNamespaceLT(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLT(FieldMetadataNamespace, v))
}

// MetadataNamespaceLTE applies the LTE predicate on the "metadata_namespace" field.
func MetadataNamespaceLTE(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldLTE(FieldMetadataNamespace, v))
}

// MetadataNamespaceContains applies the Contains predicate on the "metadata_namespace" field.
func MetadataNamespaceContains(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldContains(FieldMetadataNamespace, v))
}

// MetadataNamespaceHasPrefix applies the HasPrefix predicate on the "metadata_namespace" field.
func MetadataNamespaceHasPrefix(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldHasPrefix(FieldMetadataNamespace, v))
}

// MetadataNamespaceHasSuffix applies the HasSuffix predicate on the "metadata_namespace" field.
func MetadataNamespaceHasSuffix(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldHasSuffix(FieldMetadataNamespace, v))
}

// MetadataNamespaceEqualFold applies the EqualFold predicate on the "metadata_namespace" field.
func MetadataNamespaceEqualFold(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldEqualFold(FieldMetadataNamespace, v))
}

// MetadataNamespaceContainsFold applies the ContainsFold predicate on the "metadata_namespace" field.
func MetadataNamespaceContainsFold(v string) predicate.MetadataFormat {
	return predicate.MetadataFormat(sql.FieldContainsFold(FieldMetadataNamespace, v))
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.MetadataFormat {
	return predicate.MetadataFormat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.MetadataFormat {
	return predicate.MetadataFormat(func(s *sql.Selector) {
		step := newMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MetadataFormat) predicate.MetadataFormat {
	return predicate.MetadataFormat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MetadataFormat) predicate.MetadataFormat {
	return predicate.MetadataFormat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MetadataFormat) predicate.MetadataFormat {
	return predicate.MetadataFormat(func(s *sql.Selector) {
		p(s.Not())
	})
}
