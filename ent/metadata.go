// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/oai-service/ent/metadata"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/record"
)

// Metadata is the model entity for the Metadata schema.
type Metadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// RecordID holds the value of the "record_id" field.
	RecordID int64 `json:"record_id,omitempty"`
	// MetadataFormatID holds the value of the "metadata_format_id" field.
	MetadataFormatID int64 `json:"metadata_format_id,omitempty"`
	// XML holds the value of the "xml" field.
	XML string `json:"xml,omitempty"`
	// Datestamp holds the value of the "datestamp" field.
	Datestamp time.Time `json:"datestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetadataQuery when eager-loading is set.
	Edges        MetadataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MetadataEdges holds the relations/edges for other nodes in the graph.
type MetadataEdges struct {
	// Record holds the value of the record edge.
	Record *Record `json:"record,omitempty"`
	// MetadataFormat holds the value of the metadata_format edge.
	MetadataFormat *MetadataFormat `json:"metadata_format,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetadataEdges) RecordOrErr() (*Record, error) {
	if e.loadedTypes[0] {
		if e.Record == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: record.Label}
		}
		return e.Record, nil
	}
	return nil, &NotLoadedError{edge: "record"}
}

// MetadataFormatOrErr returns the MetadataFormat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetadataEdges) MetadataFormatOrErr() (*MetadataFormat, error) {
	if e.loadedTypes[1] {
		if e.MetadataFormat == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: metadataformat.Label}
		}
		return e.MetadataFormat, nil
	}
	return nil, &NotLoadedError{edge: "metadata_format"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metadata.FieldID, metadata.FieldRecordID, metadata.FieldMetadataFormatID:
			values[i] = new(sql.NullInt64)
		case metadata.FieldXML:
			values[i] = new(sql.NullString)
		case metadata.FieldDatestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metadata fields.
func (m *Metadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case metadata.FieldRecordID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_id", values[i])
			} else if value.Valid {
				m.RecordID = value.Int64
			}
		case metadata.FieldMetadataFormatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_format_id", values[i])
			} else if value.Valid {
				m.MetadataFormatID = value.Int64
			}
		case metadata.FieldXML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xml", values[i])
			} else if value.Valid {
				m.XML = value.String
			}
		case metadata.FieldDatestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field datestamp", values[i])
			} else if value.Valid {
				m.Datestamp = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Metadata.
// This includes values selected through modifiers, order, etc.
func (m *Metadata) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryRecord queries the "record" edge of the Metadata entity.
func (m *Metadata) QueryRecord() *RecordQuery {
	return NewMetadataClient(m.config).QueryRecord(m)
}

// QueryMetadataFormat queries the "metadata_format" edge of the Metadata entity.
func (m *Metadata) QueryMetadataFormat() *MetadataFormatQuery {
	return NewMetadataClient(m.config).QueryMetadataFormat(m)
}

// Update returns a builder for updating this Metadata.
// Note that you need to call Metadata.Unwrap() before calling this method if this Metadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metadata) Update() *MetadataUpdateOne {
	return NewMetadataClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metadata) Unwrap() *Metadata {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metadata is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metadata) String() string {
	var builder strings.Builder
	builder.WriteString("Metadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("record_id=")
	builder.WriteString(fmt.Sprintf("%v", m.RecordID))
	builder.WriteString(", ")
	builder.WriteString("metadata_format_id=")
	builder.WriteString(fmt.Sprintf("%v", m.MetadataFormatID))
	builder.WriteString(", ")
	builder.WriteString("xml=")
	builder.WriteString(m.XML)
	builder.WriteString(", ")
	builder.WriteString("datestamp=")
	builder.WriteString(m.Datestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MetadataSlice is a parsable slice of Metadata.
type MetadataSlice []*Metadata
