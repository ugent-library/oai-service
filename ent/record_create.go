// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/record"
	"github.com/ugent-library/oai-service/ent/set"
)

// RecordCreate is the builder for creating a Record entity.
type RecordCreate struct {
	config
	mutation *RecordMutation
	hooks    []Hook
}

// SetMetadataFormatID sets the "metadata_format_id" field.
func (rc *RecordCreate) SetMetadataFormatID(i int) *RecordCreate {
	rc.mutation.SetMetadataFormatID(i)
	return rc
}

// SetIdentifier sets the "identifier" field.
func (rc *RecordCreate) SetIdentifier(s string) *RecordCreate {
	rc.mutation.SetIdentifier(s)
	return rc
}

// SetMetadata sets the "metadata" field.
func (rc *RecordCreate) SetMetadata(s string) *RecordCreate {
	rc.mutation.SetMetadata(s)
	return rc
}

// SetDeleted sets the "deleted" field.
func (rc *RecordCreate) SetDeleted(b bool) *RecordCreate {
	rc.mutation.SetDeleted(b)
	return rc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (rc *RecordCreate) SetNillableDeleted(b *bool) *RecordCreate {
	if b != nil {
		rc.SetDeleted(*b)
	}
	return rc
}

// SetDatestamp sets the "datestamp" field.
func (rc *RecordCreate) SetDatestamp(t time.Time) *RecordCreate {
	rc.mutation.SetDatestamp(t)
	return rc
}

// SetNillableDatestamp sets the "datestamp" field if the given value is not nil.
func (rc *RecordCreate) SetNillableDatestamp(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetDatestamp(*t)
	}
	return rc
}

// SetMetadataFormat sets the "metadata_format" edge to the MetadataFormat entity.
func (rc *RecordCreate) SetMetadataFormat(m *MetadataFormat) *RecordCreate {
	return rc.SetMetadataFormatID(m.ID)
}

// AddSetIDs adds the "sets" edge to the Set entity by IDs.
func (rc *RecordCreate) AddSetIDs(ids ...int) *RecordCreate {
	rc.mutation.AddSetIDs(ids...)
	return rc
}

// AddSets adds the "sets" edges to the Set entity.
func (rc *RecordCreate) AddSets(s ...*Set) *RecordCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rc.AddSetIDs(ids...)
}

// Mutation returns the RecordMutation object of the builder.
func (rc *RecordCreate) Mutation() *RecordMutation {
	return rc.mutation
}

// Save creates the Record in the database.
func (rc *RecordCreate) Save(ctx context.Context) (*Record, error) {
	var (
		err  error
		node *Record
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Record)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordCreate) SaveX(ctx context.Context) *Record {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecordCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecordCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecordCreate) defaults() {
	if _, ok := rc.mutation.Deleted(); !ok {
		v := record.DefaultDeleted
		rc.mutation.SetDeleted(v)
	}
	if _, ok := rc.mutation.Datestamp(); !ok {
		v := record.DefaultDatestamp()
		rc.mutation.SetDatestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordCreate) check() error {
	if _, ok := rc.mutation.MetadataFormatID(); !ok {
		return &ValidationError{Name: "metadata_format_id", err: errors.New(`ent: missing required field "Record.metadata_format_id"`)}
	}
	if _, ok := rc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "Record.identifier"`)}
	}
	if _, ok := rc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Record.metadata"`)}
	}
	if _, ok := rc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Record.deleted"`)}
	}
	if _, ok := rc.mutation.Datestamp(); !ok {
		return &ValidationError{Name: "datestamp", err: errors.New(`ent: missing required field "Record.datestamp"`)}
	}
	if _, ok := rc.mutation.MetadataFormatID(); !ok {
		return &ValidationError{Name: "metadata_format", err: errors.New(`ent: missing required edge "Record.metadata_format"`)}
	}
	return nil
}

func (rc *RecordCreate) sqlSave(ctx context.Context) (*Record, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RecordCreate) createSpec() (*Record, *sqlgraph.CreateSpec) {
	var (
		_node = &Record{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: record.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: record.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Identifier(); ok {
		_spec.SetField(record.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := rc.mutation.Metadata(); ok {
		_spec.SetField(record.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if value, ok := rc.mutation.Deleted(); ok {
		_spec.SetField(record.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := rc.mutation.Datestamp(); ok {
		_spec.SetField(record.FieldDatestamp, field.TypeTime, value)
		_node.Datestamp = value
	}
	if nodes := rc.mutation.MetadataFormatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MetadataFormatTable,
			Columns: []string{record.MetadataFormatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadataformat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MetadataFormatID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   record.SetsTable,
			Columns: record.SetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordCreateBulk is the builder for creating many Record entities in bulk.
type RecordCreateBulk struct {
	config
	builders []*RecordCreate
}

// Save creates the Record entities in the database.
func (rcb *RecordCreateBulk) Save(ctx context.Context) ([]*Record, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Record, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecordCreateBulk) SaveX(ctx context.Context) []*Record {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecordCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecordCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
