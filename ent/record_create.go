// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/oai-service/ent/item"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/record"
)

// RecordCreate is the builder for creating a Record entity.
type RecordCreate struct {
	config
	mutation *RecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMetadataFormatID sets the "metadata_format_id" field.
func (rc *RecordCreate) SetMetadataFormatID(i int64) *RecordCreate {
	rc.mutation.SetMetadataFormatID(i)
	return rc
}

// SetItemID sets the "item_id" field.
func (rc *RecordCreate) SetItemID(i int64) *RecordCreate {
	rc.mutation.SetItemID(i)
	return rc
}

// SetMetadata sets the "metadata" field.
func (rc *RecordCreate) SetMetadata(s string) *RecordCreate {
	rc.mutation.SetMetadata(s)
	return rc
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (rc *RecordCreate) SetNillableMetadata(s *string) *RecordCreate {
	if s != nil {
		rc.SetMetadata(*s)
	}
	return rc
}

// SetDatestamp sets the "datestamp" field.
func (rc *RecordCreate) SetDatestamp(t time.Time) *RecordCreate {
	rc.mutation.SetDatestamp(t)
	return rc
}

// SetNillableDatestamp sets the "datestamp" field if the given value is not nil.
func (rc *RecordCreate) SetNillableDatestamp(t *time.Time) *RecordCreate {
	if t != nil {
		rc.SetDatestamp(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RecordCreate) SetID(i int64) *RecordCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetMetadataFormat sets the "metadata_format" edge to the MetadataFormat entity.
func (rc *RecordCreate) SetMetadataFormat(m *MetadataFormat) *RecordCreate {
	return rc.SetMetadataFormatID(m.ID)
}

// SetItem sets the "item" edge to the Item entity.
func (rc *RecordCreate) SetItem(i *Item) *RecordCreate {
	return rc.SetItemID(i.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (rc *RecordCreate) Mutation() *RecordMutation {
	return rc.mutation
}

// Save creates the Record in the database.
func (rc *RecordCreate) Save(ctx context.Context) (*Record, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordCreate) SaveX(ctx context.Context) *Record {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecordCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecordCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecordCreate) defaults() {
	if _, ok := rc.mutation.Datestamp(); !ok {
		v := record.DefaultDatestamp()
		rc.mutation.SetDatestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordCreate) check() error {
	if _, ok := rc.mutation.MetadataFormatID(); !ok {
		return &ValidationError{Name: "metadata_format_id", err: errors.New(`ent: missing required field "Record.metadata_format_id"`)}
	}
	if _, ok := rc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "Record.item_id"`)}
	}
	if _, ok := rc.mutation.Datestamp(); !ok {
		return &ValidationError{Name: "datestamp", err: errors.New(`ent: missing required field "Record.datestamp"`)}
	}
	if _, ok := rc.mutation.MetadataFormatID(); !ok {
		return &ValidationError{Name: "metadata_format", err: errors.New(`ent: missing required edge "Record.metadata_format"`)}
	}
	if _, ok := rc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item", err: errors.New(`ent: missing required edge "Record.item"`)}
	}
	return nil
}

func (rc *RecordCreate) sqlSave(ctx context.Context) (*Record, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RecordCreate) createSpec() (*Record, *sqlgraph.CreateSpec) {
	var (
		_node = &Record{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(record.Table, sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Metadata(); ok {
		_spec.SetField(record.FieldMetadata, field.TypeString, value)
		_node.Metadata = &value
	}
	if value, ok := rc.mutation.Datestamp(); ok {
		_spec.SetField(record.FieldDatestamp, field.TypeTime, value)
		_node.Datestamp = value
	}
	if nodes := rc.mutation.MetadataFormatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.MetadataFormatTable,
			Columns: []string{record.MetadataFormatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadataformat.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MetadataFormatID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.ItemTable,
			Columns: []string{record.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Record.Create().
//		SetMetadataFormatID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecordUpsert) {
//			SetMetadataFormatID(v+v).
//		}).
//		Exec(ctx)
func (rc *RecordCreate) OnConflict(opts ...sql.ConflictOption) *RecordUpsertOne {
	rc.conflict = opts
	return &RecordUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Record.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RecordCreate) OnConflictColumns(columns ...string) *RecordUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RecordUpsertOne{
		create: rc,
	}
}

type (
	// RecordUpsertOne is the builder for "upsert"-ing
	//  one Record node.
	RecordUpsertOne struct {
		create *RecordCreate
	}

	// RecordUpsert is the "OnConflict" setter.
	RecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadataFormatID sets the "metadata_format_id" field.
func (u *RecordUpsert) SetMetadataFormatID(v int64) *RecordUpsert {
	u.Set(record.FieldMetadataFormatID, v)
	return u
}

// UpdateMetadataFormatID sets the "metadata_format_id" field to the value that was provided on create.
func (u *RecordUpsert) UpdateMetadataFormatID() *RecordUpsert {
	u.SetExcluded(record.FieldMetadataFormatID)
	return u
}

// SetItemID sets the "item_id" field.
func (u *RecordUpsert) SetItemID(v int64) *RecordUpsert {
	u.Set(record.FieldItemID, v)
	return u
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *RecordUpsert) UpdateItemID() *RecordUpsert {
	u.SetExcluded(record.FieldItemID)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *RecordUpsert) SetMetadata(v string) *RecordUpsert {
	u.Set(record.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *RecordUpsert) UpdateMetadata() *RecordUpsert {
	u.SetExcluded(record.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *RecordUpsert) ClearMetadata() *RecordUpsert {
	u.SetNull(record.FieldMetadata)
	return u
}

// SetDatestamp sets the "datestamp" field.
func (u *RecordUpsert) SetDatestamp(v time.Time) *RecordUpsert {
	u.Set(record.FieldDatestamp, v)
	return u
}

// UpdateDatestamp sets the "datestamp" field to the value that was provided on create.
func (u *RecordUpsert) UpdateDatestamp() *RecordUpsert {
	u.SetExcluded(record.FieldDatestamp)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Record.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(record.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RecordUpsertOne) UpdateNewValues() *RecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(record.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Record.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RecordUpsertOne) Ignore() *RecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecordUpsertOne) DoNothing() *RecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecordCreate.OnConflict
// documentation for more info.
func (u *RecordUpsertOne) Update(set func(*RecordUpsert)) *RecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadataFormatID sets the "metadata_format_id" field.
func (u *RecordUpsertOne) SetMetadataFormatID(v int64) *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.SetMetadataFormatID(v)
	})
}

// UpdateMetadataFormatID sets the "metadata_format_id" field to the value that was provided on create.
func (u *RecordUpsertOne) UpdateMetadataFormatID() *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateMetadataFormatID()
	})
}

// SetItemID sets the "item_id" field.
func (u *RecordUpsertOne) SetItemID(v int64) *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *RecordUpsertOne) UpdateItemID() *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateItemID()
	})
}

// SetMetadata sets the "metadata" field.
func (u *RecordUpsertOne) SetMetadata(v string) *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *RecordUpsertOne) UpdateMetadata() *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *RecordUpsertOne) ClearMetadata() *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.ClearMetadata()
	})
}

// SetDatestamp sets the "datestamp" field.
func (u *RecordUpsertOne) SetDatestamp(v time.Time) *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.SetDatestamp(v)
	})
}

// UpdateDatestamp sets the "datestamp" field to the value that was provided on create.
func (u *RecordUpsertOne) UpdateDatestamp() *RecordUpsertOne {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateDatestamp()
	})
}

// Exec executes the query.
func (u *RecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RecordCreateBulk is the builder for creating many Record entities in bulk.
type RecordCreateBulk struct {
	config
	builders []*RecordCreate
	conflict []sql.ConflictOption
}

// Save creates the Record entities in the database.
func (rcb *RecordCreateBulk) Save(ctx context.Context) ([]*Record, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Record, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecordCreateBulk) SaveX(ctx context.Context) []*Record {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecordCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecordCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Record.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecordUpsert) {
//			SetMetadataFormatID(v+v).
//		}).
//		Exec(ctx)
func (rcb *RecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *RecordUpsertBulk {
	rcb.conflict = opts
	return &RecordUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Record.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RecordCreateBulk) OnConflictColumns(columns ...string) *RecordUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RecordUpsertBulk{
		create: rcb,
	}
}

// RecordUpsertBulk is the builder for "upsert"-ing
// a bulk of Record nodes.
type RecordUpsertBulk struct {
	create *RecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Record.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(record.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RecordUpsertBulk) UpdateNewValues() *RecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(record.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Record.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RecordUpsertBulk) Ignore() *RecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecordUpsertBulk) DoNothing() *RecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecordCreateBulk.OnConflict
// documentation for more info.
func (u *RecordUpsertBulk) Update(set func(*RecordUpsert)) *RecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadataFormatID sets the "metadata_format_id" field.
func (u *RecordUpsertBulk) SetMetadataFormatID(v int64) *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.SetMetadataFormatID(v)
	})
}

// UpdateMetadataFormatID sets the "metadata_format_id" field to the value that was provided on create.
func (u *RecordUpsertBulk) UpdateMetadataFormatID() *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateMetadataFormatID()
	})
}

// SetItemID sets the "item_id" field.
func (u *RecordUpsertBulk) SetItemID(v int64) *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *RecordUpsertBulk) UpdateItemID() *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateItemID()
	})
}

// SetMetadata sets the "metadata" field.
func (u *RecordUpsertBulk) SetMetadata(v string) *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *RecordUpsertBulk) UpdateMetadata() *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *RecordUpsertBulk) ClearMetadata() *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.ClearMetadata()
	})
}

// SetDatestamp sets the "datestamp" field.
func (u *RecordUpsertBulk) SetDatestamp(v time.Time) *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.SetDatestamp(v)
	})
}

// UpdateDatestamp sets the "datestamp" field to the value that was provided on create.
func (u *RecordUpsertBulk) UpdateDatestamp() *RecordUpsertBulk {
	return u.Update(func(s *RecordUpsert) {
		s.UpdateDatestamp()
	})
}

// Exec executes the query.
func (u *RecordUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
