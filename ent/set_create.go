// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/oai-service/ent/record"
	"github.com/ugent-library/oai-service/ent/set"
)

// SetCreate is the builder for creating a Set entity.
type SetCreate struct {
	config
	mutation *SetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSetSpec sets the "set_spec" field.
func (sc *SetCreate) SetSetSpec(s string) *SetCreate {
	sc.mutation.SetSetSpec(s)
	return sc
}

// SetSetName sets the "set_name" field.
func (sc *SetCreate) SetSetName(s string) *SetCreate {
	sc.mutation.SetSetName(s)
	return sc
}

// SetSetDescription sets the "set_description" field.
func (sc *SetCreate) SetSetDescription(s string) *SetCreate {
	sc.mutation.SetSetDescription(s)
	return sc
}

// SetNillableSetDescription sets the "set_description" field if the given value is not nil.
func (sc *SetCreate) SetNillableSetDescription(s *string) *SetCreate {
	if s != nil {
		sc.SetSetDescription(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SetCreate) SetID(i int64) *SetCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (sc *SetCreate) AddRecordIDs(ids ...int64) *SetCreate {
	sc.mutation.AddRecordIDs(ids...)
	return sc
}

// AddRecords adds the "records" edges to the Record entity.
func (sc *SetCreate) AddRecords(r ...*Record) *SetCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddRecordIDs(ids...)
}

// Mutation returns the SetMutation object of the builder.
func (sc *SetCreate) Mutation() *SetMutation {
	return sc.mutation
}

// Save creates the Set in the database.
func (sc *SetCreate) Save(ctx context.Context) (*Set, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SetCreate) SaveX(ctx context.Context) *Set {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SetCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SetCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SetCreate) check() error {
	if _, ok := sc.mutation.SetSpec(); !ok {
		return &ValidationError{Name: "set_spec", err: errors.New(`ent: missing required field "Set.set_spec"`)}
	}
	if _, ok := sc.mutation.SetName(); !ok {
		return &ValidationError{Name: "set_name", err: errors.New(`ent: missing required field "Set.set_name"`)}
	}
	return nil
}

func (sc *SetCreate) sqlSave(ctx context.Context) (*Set, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SetCreate) createSpec() (*Set, *sqlgraph.CreateSpec) {
	var (
		_node = &Set{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(set.Table, sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.SetSpec(); ok {
		_spec.SetField(set.FieldSetSpec, field.TypeString, value)
		_node.SetSpec = value
	}
	if value, ok := sc.mutation.SetName(); ok {
		_spec.SetField(set.FieldSetName, field.TypeString, value)
		_node.SetName = value
	}
	if value, ok := sc.mutation.SetDescription(); ok {
		_spec.SetField(set.FieldSetDescription, field.TypeString, value)
		_node.SetDescription = value
	}
	if nodes := sc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   set.RecordsTable,
			Columns: set.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Set.Create().
//		SetSetSpec(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SetUpsert) {
//			SetSetSpec(v+v).
//		}).
//		Exec(ctx)
func (sc *SetCreate) OnConflict(opts ...sql.ConflictOption) *SetUpsertOne {
	sc.conflict = opts
	return &SetUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Set.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SetCreate) OnConflictColumns(columns ...string) *SetUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SetUpsertOne{
		create: sc,
	}
}

type (
	// SetUpsertOne is the builder for "upsert"-ing
	//  one Set node.
	SetUpsertOne struct {
		create *SetCreate
	}

	// SetUpsert is the "OnConflict" setter.
	SetUpsert struct {
		*sql.UpdateSet
	}
)

// SetSetSpec sets the "set_spec" field.
func (u *SetUpsert) SetSetSpec(v string) *SetUpsert {
	u.Set(set.FieldSetSpec, v)
	return u
}

// UpdateSetSpec sets the "set_spec" field to the value that was provided on create.
func (u *SetUpsert) UpdateSetSpec() *SetUpsert {
	u.SetExcluded(set.FieldSetSpec)
	return u
}

// SetSetName sets the "set_name" field.
func (u *SetUpsert) SetSetName(v string) *SetUpsert {
	u.Set(set.FieldSetName, v)
	return u
}

// UpdateSetName sets the "set_name" field to the value that was provided on create.
func (u *SetUpsert) UpdateSetName() *SetUpsert {
	u.SetExcluded(set.FieldSetName)
	return u
}

// SetSetDescription sets the "set_description" field.
func (u *SetUpsert) SetSetDescription(v string) *SetUpsert {
	u.Set(set.FieldSetDescription, v)
	return u
}

// UpdateSetDescription sets the "set_description" field to the value that was provided on create.
func (u *SetUpsert) UpdateSetDescription() *SetUpsert {
	u.SetExcluded(set.FieldSetDescription)
	return u
}

// ClearSetDescription clears the value of the "set_description" field.
func (u *SetUpsert) ClearSetDescription() *SetUpsert {
	u.SetNull(set.FieldSetDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Set.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(set.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SetUpsertOne) UpdateNewValues() *SetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(set.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Set.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SetUpsertOne) Ignore() *SetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SetUpsertOne) DoNothing() *SetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SetCreate.OnConflict
// documentation for more info.
func (u *SetUpsertOne) Update(set func(*SetUpsert)) *SetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SetUpsert{UpdateSet: update})
	}))
	return u
}

// SetSetSpec sets the "set_spec" field.
func (u *SetUpsertOne) SetSetSpec(v string) *SetUpsertOne {
	return u.Update(func(s *SetUpsert) {
		s.SetSetSpec(v)
	})
}

// UpdateSetSpec sets the "set_spec" field to the value that was provided on create.
func (u *SetUpsertOne) UpdateSetSpec() *SetUpsertOne {
	return u.Update(func(s *SetUpsert) {
		s.UpdateSetSpec()
	})
}

// SetSetName sets the "set_name" field.
func (u *SetUpsertOne) SetSetName(v string) *SetUpsertOne {
	return u.Update(func(s *SetUpsert) {
		s.SetSetName(v)
	})
}

// UpdateSetName sets the "set_name" field to the value that was provided on create.
func (u *SetUpsertOne) UpdateSetName() *SetUpsertOne {
	return u.Update(func(s *SetUpsert) {
		s.UpdateSetName()
	})
}

// SetSetDescription sets the "set_description" field.
func (u *SetUpsertOne) SetSetDescription(v string) *SetUpsertOne {
	return u.Update(func(s *SetUpsert) {
		s.SetSetDescription(v)
	})
}

// UpdateSetDescription sets the "set_description" field to the value that was provided on create.
func (u *SetUpsertOne) UpdateSetDescription() *SetUpsertOne {
	return u.Update(func(s *SetUpsert) {
		s.UpdateSetDescription()
	})
}

// ClearSetDescription clears the value of the "set_description" field.
func (u *SetUpsertOne) ClearSetDescription() *SetUpsertOne {
	return u.Update(func(s *SetUpsert) {
		s.ClearSetDescription()
	})
}

// Exec executes the query.
func (u *SetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SetUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SetUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SetCreateBulk is the builder for creating many Set entities in bulk.
type SetCreateBulk struct {
	config
	builders []*SetCreate
	conflict []sql.ConflictOption
}

// Save creates the Set entities in the database.
func (scb *SetCreateBulk) Save(ctx context.Context) ([]*Set, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Set, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SetCreateBulk) SaveX(ctx context.Context) []*Set {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SetCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SetCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Set.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SetUpsert) {
//			SetSetSpec(v+v).
//		}).
//		Exec(ctx)
func (scb *SetCreateBulk) OnConflict(opts ...sql.ConflictOption) *SetUpsertBulk {
	scb.conflict = opts
	return &SetUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Set.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SetCreateBulk) OnConflictColumns(columns ...string) *SetUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SetUpsertBulk{
		create: scb,
	}
}

// SetUpsertBulk is the builder for "upsert"-ing
// a bulk of Set nodes.
type SetUpsertBulk struct {
	create *SetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Set.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(set.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SetUpsertBulk) UpdateNewValues() *SetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(set.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Set.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SetUpsertBulk) Ignore() *SetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SetUpsertBulk) DoNothing() *SetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SetCreateBulk.OnConflict
// documentation for more info.
func (u *SetUpsertBulk) Update(set func(*SetUpsert)) *SetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SetUpsert{UpdateSet: update})
	}))
	return u
}

// SetSetSpec sets the "set_spec" field.
func (u *SetUpsertBulk) SetSetSpec(v string) *SetUpsertBulk {
	return u.Update(func(s *SetUpsert) {
		s.SetSetSpec(v)
	})
}

// UpdateSetSpec sets the "set_spec" field to the value that was provided on create.
func (u *SetUpsertBulk) UpdateSetSpec() *SetUpsertBulk {
	return u.Update(func(s *SetUpsert) {
		s.UpdateSetSpec()
	})
}

// SetSetName sets the "set_name" field.
func (u *SetUpsertBulk) SetSetName(v string) *SetUpsertBulk {
	return u.Update(func(s *SetUpsert) {
		s.SetSetName(v)
	})
}

// UpdateSetName sets the "set_name" field to the value that was provided on create.
func (u *SetUpsertBulk) UpdateSetName() *SetUpsertBulk {
	return u.Update(func(s *SetUpsert) {
		s.UpdateSetName()
	})
}

// SetSetDescription sets the "set_description" field.
func (u *SetUpsertBulk) SetSetDescription(v string) *SetUpsertBulk {
	return u.Update(func(s *SetUpsert) {
		s.SetSetDescription(v)
	})
}

// UpdateSetDescription sets the "set_description" field to the value that was provided on create.
func (u *SetUpsertBulk) UpdateSetDescription() *SetUpsertBulk {
	return u.Update(func(s *SetUpsert) {
		s.UpdateSetDescription()
	})
}

// ClearSetDescription clears the value of the "set_description" field.
func (u *SetUpsertBulk) ClearSetDescription() *SetUpsertBulk {
	return u.Update(func(s *SetUpsert) {
		s.ClearSetDescription()
	})
}

// Exec executes the query.
func (u *SetUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
