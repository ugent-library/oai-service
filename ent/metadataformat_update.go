// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/oai-service/ent/metadata"
	"github.com/ugent-library/oai-service/ent/metadataformat"
	"github.com/ugent-library/oai-service/ent/predicate"
)

// MetadataFormatUpdate is the builder for updating MetadataFormat entities.
type MetadataFormatUpdate struct {
	config
	hooks    []Hook
	mutation *MetadataFormatMutation
}

// Where appends a list predicates to the MetadataFormatUpdate builder.
func (mfu *MetadataFormatUpdate) Where(ps ...predicate.MetadataFormat) *MetadataFormatUpdate {
	mfu.mutation.Where(ps...)
	return mfu
}

// SetMetadataPrefix sets the "metadata_prefix" field.
func (mfu *MetadataFormatUpdate) SetMetadataPrefix(s string) *MetadataFormatUpdate {
	mfu.mutation.SetMetadataPrefix(s)
	return mfu
}

// SetSchema sets the "schema" field.
func (mfu *MetadataFormatUpdate) SetSchema(s string) *MetadataFormatUpdate {
	mfu.mutation.SetSchema(s)
	return mfu
}

// SetMetadataNamespace sets the "metadata_namespace" field.
func (mfu *MetadataFormatUpdate) SetMetadataNamespace(s string) *MetadataFormatUpdate {
	mfu.mutation.SetMetadataNamespace(s)
	return mfu
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (mfu *MetadataFormatUpdate) AddMetadatumIDs(ids ...int64) *MetadataFormatUpdate {
	mfu.mutation.AddMetadatumIDs(ids...)
	return mfu
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (mfu *MetadataFormatUpdate) AddMetadata(m ...*Metadata) *MetadataFormatUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfu.AddMetadatumIDs(ids...)
}

// Mutation returns the MetadataFormatMutation object of the builder.
func (mfu *MetadataFormatUpdate) Mutation() *MetadataFormatMutation {
	return mfu.mutation
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (mfu *MetadataFormatUpdate) ClearMetadata() *MetadataFormatUpdate {
	mfu.mutation.ClearMetadata()
	return mfu
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (mfu *MetadataFormatUpdate) RemoveMetadatumIDs(ids ...int64) *MetadataFormatUpdate {
	mfu.mutation.RemoveMetadatumIDs(ids...)
	return mfu
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (mfu *MetadataFormatUpdate) RemoveMetadata(m ...*Metadata) *MetadataFormatUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfu.RemoveMetadatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mfu *MetadataFormatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mfu.sqlSave, mfu.mutation, mfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mfu *MetadataFormatUpdate) SaveX(ctx context.Context) int {
	affected, err := mfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mfu *MetadataFormatUpdate) Exec(ctx context.Context) error {
	_, err := mfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfu *MetadataFormatUpdate) ExecX(ctx context.Context) {
	if err := mfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mfu *MetadataFormatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metadataformat.Table, metadataformat.Columns, sqlgraph.NewFieldSpec(metadataformat.FieldID, field.TypeInt64))
	if ps := mfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mfu.mutation.MetadataPrefix(); ok {
		_spec.SetField(metadataformat.FieldMetadataPrefix, field.TypeString, value)
	}
	if value, ok := mfu.mutation.Schema(); ok {
		_spec.SetField(metadataformat.FieldSchema, field.TypeString, value)
	}
	if value, ok := mfu.mutation.MetadataNamespace(); ok {
		_spec.SetField(metadataformat.FieldMetadataNamespace, field.TypeString, value)
	}
	if mfu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metadataformat.MetadataTable,
			Columns: []string{metadataformat.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfu.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !mfu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metadataformat.MetadataTable,
			Columns: []string{metadataformat.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metadataformat.MetadataTable,
			Columns: []string{metadataformat.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadataformat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mfu.mutation.done = true
	return n, nil
}

// MetadataFormatUpdateOne is the builder for updating a single MetadataFormat entity.
type MetadataFormatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetadataFormatMutation
}

// SetMetadataPrefix sets the "metadata_prefix" field.
func (mfuo *MetadataFormatUpdateOne) SetMetadataPrefix(s string) *MetadataFormatUpdateOne {
	mfuo.mutation.SetMetadataPrefix(s)
	return mfuo
}

// SetSchema sets the "schema" field.
func (mfuo *MetadataFormatUpdateOne) SetSchema(s string) *MetadataFormatUpdateOne {
	mfuo.mutation.SetSchema(s)
	return mfuo
}

// SetMetadataNamespace sets the "metadata_namespace" field.
func (mfuo *MetadataFormatUpdateOne) SetMetadataNamespace(s string) *MetadataFormatUpdateOne {
	mfuo.mutation.SetMetadataNamespace(s)
	return mfuo
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (mfuo *MetadataFormatUpdateOne) AddMetadatumIDs(ids ...int64) *MetadataFormatUpdateOne {
	mfuo.mutation.AddMetadatumIDs(ids...)
	return mfuo
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (mfuo *MetadataFormatUpdateOne) AddMetadata(m ...*Metadata) *MetadataFormatUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfuo.AddMetadatumIDs(ids...)
}

// Mutation returns the MetadataFormatMutation object of the builder.
func (mfuo *MetadataFormatUpdateOne) Mutation() *MetadataFormatMutation {
	return mfuo.mutation
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (mfuo *MetadataFormatUpdateOne) ClearMetadata() *MetadataFormatUpdateOne {
	mfuo.mutation.ClearMetadata()
	return mfuo
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (mfuo *MetadataFormatUpdateOne) RemoveMetadatumIDs(ids ...int64) *MetadataFormatUpdateOne {
	mfuo.mutation.RemoveMetadatumIDs(ids...)
	return mfuo
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (mfuo *MetadataFormatUpdateOne) RemoveMetadata(m ...*Metadata) *MetadataFormatUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfuo.RemoveMetadatumIDs(ids...)
}

// Where appends a list predicates to the MetadataFormatUpdate builder.
func (mfuo *MetadataFormatUpdateOne) Where(ps ...predicate.MetadataFormat) *MetadataFormatUpdateOne {
	mfuo.mutation.Where(ps...)
	return mfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mfuo *MetadataFormatUpdateOne) Select(field string, fields ...string) *MetadataFormatUpdateOne {
	mfuo.fields = append([]string{field}, fields...)
	return mfuo
}

// Save executes the query and returns the updated MetadataFormat entity.
func (mfuo *MetadataFormatUpdateOne) Save(ctx context.Context) (*MetadataFormat, error) {
	return withHooks(ctx, mfuo.sqlSave, mfuo.mutation, mfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mfuo *MetadataFormatUpdateOne) SaveX(ctx context.Context) *MetadataFormat {
	node, err := mfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mfuo *MetadataFormatUpdateOne) Exec(ctx context.Context) error {
	_, err := mfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfuo *MetadataFormatUpdateOne) ExecX(ctx context.Context) {
	if err := mfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mfuo *MetadataFormatUpdateOne) sqlSave(ctx context.Context) (_node *MetadataFormat, err error) {
	_spec := sqlgraph.NewUpdateSpec(metadataformat.Table, metadataformat.Columns, sqlgraph.NewFieldSpec(metadataformat.FieldID, field.TypeInt64))
	id, ok := mfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MetadataFormat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metadataformat.FieldID)
		for _, f := range fields {
			if !metadataformat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metadataformat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mfuo.mutation.MetadataPrefix(); ok {
		_spec.SetField(metadataformat.FieldMetadataPrefix, field.TypeString, value)
	}
	if value, ok := mfuo.mutation.Schema(); ok {
		_spec.SetField(metadataformat.FieldSchema, field.TypeString, value)
	}
	if value, ok := mfuo.mutation.MetadataNamespace(); ok {
		_spec.SetField(metadataformat.FieldMetadataNamespace, field.TypeString, value)
	}
	if mfuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metadataformat.MetadataTable,
			Columns: []string{metadataformat.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfuo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !mfuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metadataformat.MetadataTable,
			Columns: []string{metadataformat.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metadataformat.MetadataTable,
			Columns: []string{metadataformat.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MetadataFormat{config: mfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadataformat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mfuo.mutation.done = true
	return _node, nil
}
