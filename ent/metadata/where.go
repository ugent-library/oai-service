// Code generated by ent, DO NOT EDIT.

package metadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugent-library/oai-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldID, id))
}

// RecordID applies equality check predicate on the "record_id" field. It's identical to RecordIDEQ.
func RecordID(v int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldRecordID, v))
}

// MetadataFormatID applies equality check predicate on the "metadata_format_id" field. It's identical to MetadataFormatIDEQ.
func MetadataFormatID(v int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldMetadataFormatID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldContent, v))
}

// Datestamp applies equality check predicate on the "datestamp" field. It's identical to DatestampEQ.
func Datestamp(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldDatestamp, v))
}

// RecordIDEQ applies the EQ predicate on the "record_id" field.
func RecordIDEQ(v int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldRecordID, v))
}

// RecordIDNEQ applies the NEQ predicate on the "record_id" field.
func RecordIDNEQ(v int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldRecordID, v))
}

// RecordIDIn applies the In predicate on the "record_id" field.
func RecordIDIn(vs ...int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldRecordID, vs...))
}

// RecordIDNotIn applies the NotIn predicate on the "record_id" field.
func RecordIDNotIn(vs ...int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldRecordID, vs...))
}

// MetadataFormatIDEQ applies the EQ predicate on the "metadata_format_id" field.
func MetadataFormatIDEQ(v int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldMetadataFormatID, v))
}

// MetadataFormatIDNEQ applies the NEQ predicate on the "metadata_format_id" field.
func MetadataFormatIDNEQ(v int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldMetadataFormatID, v))
}

// MetadataFormatIDIn applies the In predicate on the "metadata_format_id" field.
func MetadataFormatIDIn(vs ...int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldMetadataFormatID, vs...))
}

// MetadataFormatIDNotIn applies the NotIn predicate on the "metadata_format_id" field.
func MetadataFormatIDNotIn(vs ...int64) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldMetadataFormatID, vs...))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContainsFold(FieldContent, v))
}

// DatestampEQ applies the EQ predicate on the "datestamp" field.
func DatestampEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldDatestamp, v))
}

// DatestampNEQ applies the NEQ predicate on the "datestamp" field.
func DatestampNEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldDatestamp, v))
}

// DatestampIn applies the In predicate on the "datestamp" field.
func DatestampIn(vs ...time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldDatestamp, vs...))
}

// DatestampNotIn applies the NotIn predicate on the "datestamp" field.
func DatestampNotIn(vs ...time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldDatestamp, vs...))
}

// DatestampGT applies the GT predicate on the "datestamp" field.
func DatestampGT(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldDatestamp, v))
}

// DatestampGTE applies the GTE predicate on the "datestamp" field.
func DatestampGTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldDatestamp, v))
}

// DatestampLT applies the LT predicate on the "datestamp" field.
func DatestampLT(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldDatestamp, v))
}

// DatestampLTE applies the LTE predicate on the "datestamp" field.
func DatestampLTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldDatestamp, v))
}

// HasRecord applies the HasEdge predicate on the "record" edge.
func HasRecord() predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecordTable, RecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordWith applies the HasEdge predicate on the "record" edge with a given conditions (other predicates).
func HasRecordWith(preds ...predicate.Record) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		step := newRecordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMetadataFormat applies the HasEdge predicate on the "metadata_format" edge.
func HasMetadataFormat() predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MetadataFormatTable, MetadataFormatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataFormatWith applies the HasEdge predicate on the "metadata_format" edge with a given conditions (other predicates).
func HasMetadataFormatWith(preds ...predicate.MetadataFormat) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		step := newMetadataFormatStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		p(s.Not())
	})
}
