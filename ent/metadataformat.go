// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/oai-service/ent/metadataformat"
)

// MetadataFormat is the model entity for the MetadataFormat schema.
type MetadataFormat struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Prefix holds the value of the "prefix" field.
	Prefix string `json:"prefix,omitempty"`
	// Schema holds the value of the "schema" field.
	Schema string `json:"schema,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetadataFormatQuery when eager-loading is set.
	Edges MetadataFormatEdges `json:"edges"`
}

// MetadataFormatEdges holds the relations/edges for other nodes in the graph.
type MetadataFormatEdges struct {
	// Records holds the value of the records edge.
	Records []*Record `json:"records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecordsOrErr returns the Records value or an error if the edge
// was not loaded in eager-loading.
func (e MetadataFormatEdges) RecordsOrErr() ([]*Record, error) {
	if e.loadedTypes[0] {
		return e.Records, nil
	}
	return nil, &NotLoadedError{edge: "records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetadataFormat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metadataformat.FieldID:
			values[i] = new(sql.NullInt64)
		case metadataformat.FieldPrefix, metadataformat.FieldSchema, metadataformat.FieldNamespace:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MetadataFormat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetadataFormat fields.
func (mf *MetadataFormat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metadataformat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mf.ID = int64(value.Int64)
		case metadataformat.FieldPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix", values[i])
			} else if value.Valid {
				mf.Prefix = value.String
			}
		case metadataformat.FieldSchema:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schema", values[i])
			} else if value.Valid {
				mf.Schema = value.String
			}
		case metadataformat.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				mf.Namespace = value.String
			}
		}
	}
	return nil
}

// QueryRecords queries the "records" edge of the MetadataFormat entity.
func (mf *MetadataFormat) QueryRecords() *RecordQuery {
	return (&MetadataFormatClient{config: mf.config}).QueryRecords(mf)
}

// Update returns a builder for updating this MetadataFormat.
// Note that you need to call MetadataFormat.Unwrap() before calling this method if this MetadataFormat
// was returned from a transaction, and the transaction was committed or rolled back.
func (mf *MetadataFormat) Update() *MetadataFormatUpdateOne {
	return (&MetadataFormatClient{config: mf.config}).UpdateOne(mf)
}

// Unwrap unwraps the MetadataFormat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mf *MetadataFormat) Unwrap() *MetadataFormat {
	_tx, ok := mf.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetadataFormat is not a transactional entity")
	}
	mf.config.driver = _tx.drv
	return mf
}

// String implements the fmt.Stringer.
func (mf *MetadataFormat) String() string {
	var builder strings.Builder
	builder.WriteString("MetadataFormat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mf.ID))
	builder.WriteString("prefix=")
	builder.WriteString(mf.Prefix)
	builder.WriteString(", ")
	builder.WriteString("schema=")
	builder.WriteString(mf.Schema)
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(mf.Namespace)
	builder.WriteByte(')')
	return builder.String()
}

// MetadataFormats is a parsable slice of MetadataFormat.
type MetadataFormats []*MetadataFormat

func (mf MetadataFormats) config(cfg config) {
	for _i := range mf {
		mf[_i].config = cfg
	}
}
